---

- name: Pre-reqs for ansible to run
  hosts: all
  gather_facts: false
  become: yes
  pre_tasks:
    - name: Install python
      raw: test -e /usr/bin/python || ( yum -y update && yum install -y python-minimal)

- name: Install HTTPD
  hosts: all
  become: yes
  tasks:
    - name: Yum Install Pre Dependencies
      yum: name={{ item }}
      with_items:
        - epel-release
        - openssl-devel
        - wget
        - curl
      become: true

    - name: Set timezone to Europe/London
      timezone:
        name: Europe/London

    - name: Yum install required packages
      yum: name={{ item }}
      with_items:
        - python-pip
        - cloud-utils
        - httpd
        - mod_ssl
        - python-certbot-apache
      become: true

    - name: Create certificate folder structure
      file:
        path: /etc/letsencrypt/live
        state: directory
        recurse: yes
        mode: 700

    - name: Install Python3 for cert expire script to run
      raw: yum -y install python3

    - name: Create expire script directory and file
      copy:
        src: scripts/
        dest: /etc/letsencrypt/ssl_expire_script
        mode: 700

    - name: Create cronjob to run Tableau to S3 backup script every day at 7PM
      cron:
        name: Check Certificate Expiry Status
        special_time: daily
        minute: 0
        hour: 9
        job: . /root/.bashrc && /bin/python3 /etc/letsencrypt/ssl_expire_script/cert_expiry_monitor.py


    - service:
        name: httpd
        enabled: yes
        state: started

    - name: Configure SELinux for Apache
      shell: '{{ item }}'
      with_items:
        - semanage permissive -a httpd_t
        - setsebool httpd_can_network_relay on
        - setsebool -P httpd_can_network_relay on

    - name: Pip Install AWSCLI
      pip: 'name={{ item }}'
      with_items:
        - AWSCLI
      become: true

    - name: update all libraries, excluding python-urllib
      yum:
        name: '*'
        state: latest
        exclude: python-urllib*

    - name: GET config files from DQ-config-bucket
      shell: aws s3 cp s3://dq-config-bucket/dq-packer-ops-httpd /tmp/install --recursive

    - name: Move config files to appropriate locations
      shell: '{{ item }}'
      with_items:
        - cp -f /tmp/install/httpd.conf /etc/httpd/conf/httpd.conf
        - cp -f /tmp/install/ssl.conf /etc/httpd/conf.d/ssl.conf
        - cp -f /tmp/install/config.ini /etc/letsencrypt/config.ini
        - chmod 644 /etc/letsencrypt/config.ini

    - user:
        name: centos

    - name: Transfer the script
      copy: src=templates/gets3content.sh dest=/home/centos mode=0770

    - name: Cron script copying HTTPD config from S3 and reloading gracefully
      cron:
        minute: "*"
        hour: "*"
        job: source /root/.bashrc && /home/centos/gets3content.sh

    - user:
        name: apache

    - name: Download cloudwatch logs agent
      get_url:
        url: https://s3.amazonaws.com//aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
        dest: /tmp/awslogs-agent-setup.py
        mode: "+x"

    - name: Cloudwatch logs config
      copy:
        dest: /tmp/cwlogs.conf
        content: |
          [general]
          state_file = /var/awslogs/state/agent-state
          [/var/log/messages]
          file = /var/log/messages
          log_group_name = /HTTPD/messages
          log_stream_name = {instance_id}
          datetime_format = %b %d %H:%M:%S
          [/HTTPD/cloud-init]
          file = /var/log/cloud-init.log
          log_group_name = /HTTPD/cloud-init
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/cloud-init/output]
          file = /var/log/cloud-init-output.log
          log_group_name = /HTTPD/cloud-init/output
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/cron]
          file = /var/log/cron
          log_group_name = /HTTPD/cron
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/secure]
          file = /var/log/secure
          log_group_name = /HTTPD/secure
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/yum]
          file = /var/log/yum.log
          log_group_name = /HTTPD/yum
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/httpd_access_log]
          file = /var/log/httpd/access_log
          log_group_name = /HTTPD/httpd_access_log
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/httpd_error_log]
          file = /var/log/httpd/error_log
          log_group_name = /HTTPD/httpd_error_log
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/httpd_ssl_access_log]
          file = /var/log/httpd/ssl_access_log
          log_group_name = /HTTPD/httpd_ssl_access_log
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/httpd_ssl_error_log]
          file = /var/log/httpd/ssl_error_log
          log_group_name = /HTTPD/httpd_ssl_error_log
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/httpd_ssl_request_log]
          file = /var/log/httpd/ssl_request_log
          log_group_name = /HTTPD/httpd_ssl_request_log
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/HTTPD/syslog]
          file = /var/log/syslog
          log_group_name = /HTTPD/syslog
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f

    - name: Install cloudwatch log agent
      environment:
        LC_ALL: C
      shell: /tmp/awslogs-agent-setup.py --region eu-west-2 --non-interactive -c /tmp/cwlogs.conf
      args:
        creates: /var/awslogs/etc/aws.conf

    - name: Copy cloudwatch logs starter
      copy:
        src: startcloudwatchlogs.sh
        dest: /usr/bin/startcloudwatchlogs.sh
        owner: root
        group: root
        mode: 0755

    - name: Make Cron Job to start awslogs with right region
      cron:
        name: Start awslogs
        special_time: reboot
        job: /usr/bin/startcloudwatchlogs.sh

    - name: Set DNS Resolver Options
      blockinfile:
        path: /etc/sysconfig/network
        block: |
          RES_OPTIONS="rotate timeout:1 attempts:1"

    - name: Secure sshd_config
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PermitRootLogin"
                  line="PermitRootLogin no"
                  state=present
    - lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PasswordAuthentication"
                  line="PasswordAuthentication no"
                  state=present
    - lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^X11Forwarding"
                  line="X11Forwarding no"
                  state=present
